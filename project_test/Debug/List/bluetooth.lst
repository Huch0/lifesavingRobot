###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       12/Dec/2024  15:32:23
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\bluetooth.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EW5877.tmp
#        (C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\bluetooth.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List
#        -o
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\inc\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List\bluetooth.lst
#    Object file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj\bluetooth.o
#
###############################################################################

C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\bluetooth.c
      1          #include "bluetooth.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x....             LDR.N    R1,??DataTable5  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void bt_init(void)
      4          {
   \                     bt_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      5              bt_rcc_configure();
   \   00000002   0x.... 0x....      BL       bt_rcc_configure
      6              bt_gpio_configure();
   \   00000006   0x.... 0x....      BL       bt_gpio_configure
      7              bt_usart2_configure();
   \   0000000A   0x.... 0x....      BL       bt_usart2_configure
      8              bt_nvic_configure();
   \   0000000E   0x.... 0x....      BL       bt_nvic_configure
      9          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     10          

   \                                 In section .text, align 2, keep-with-next
     11          void bt_rcc_configure(void)
     12          {
   \                     bt_rcc_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     13              /* USART2 TX/RX port clock enable */
     14              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     15          
     16              /* USART2 clock enable */
     17              RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000010   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     18          
     19              /* Alternate Function IO clock enable */
     20              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     21          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void bt_gpio_configure(void)
     24          {
   \                     bt_gpio_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     25              GPIO_InitTypeDef GPIO_InitStructure;
     26          
     27              /* USART2 pin setting */
     28              // TX (PA2)
     29              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     30              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     31              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   0000000E   0x2018             MOVS     R0,#+24
   \   00000010   0xF88D 0x0003      STRB     R0,[SP, #+3]
     32              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40010800
   \   00000018   0x.... 0x....      BL       GPIO_Init
     33          
     34              // RX (PA3)
     35              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \   0000001C   0x2008             MOVS     R0,#+8
   \   0000001E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     36              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \   00000022   0x2048             MOVS     R0,#+72
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
     37              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40010800
   \   0000002C   0x.... 0x....      BL       GPIO_Init
     38          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void bt_usart2_configure(void)
     41          {
   \                     bt_usart2_configure: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     42              USART_InitTypeDef USART2_InitStructure;
     43          
     44              // Enable the USART2 peripheral
     45              USART_Cmd(USART2, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   00000006   0x.... 0x....      BL       USART_Cmd
     46          
     47              // Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
     48              USART2_InitStructure.USART_BaudRate = 9600;
   \   0000000A   0xF44F 0x5016      MOV      R0,#+9600
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     49              USART2_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     50              USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     51              USART2_InitStructure.USART_Parity = USART_Parity_No;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     52              USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     53              USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000028   0x200C             MOVS     R0,#+12
   \   0000002A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     54              USART_Init(USART2, &USART2_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   00000032   0x.... 0x....      BL       USART_Init
     55          
     56              // Enable the USART2 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
     57              USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xF240 0x5125      MOVW     R1,#+1317
   \   0000003C   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   0000003E   0x.... 0x....      BL       USART_ITConfig
     58          }
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBD00             POP      {PC}             ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void bt_nvic_configure(void)
     61          {
   \                     bt_nvic_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     62          
     63              NVIC_InitTypeDef NVIC_InitStructure;
     64          
     65              NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \   00000002   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
     66          
     67              // USART2
     68              // 'NVIC_EnableIRQ' is only required for USART setting
     69              NVIC_EnableIRQ(USART2_IRQn);
   \   0000000A   0x2026             MOVS     R0,#+38
   \   0000000C   0x.... 0x....      BL       __NVIC_EnableIRQ
     70              NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   00000010   0x2026             MOVS     R0,#+38
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
     71              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
     72              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     73              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
     74              NVIC_Init(&NVIC_InitStructure);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       NVIC_Init
     75          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
     76          

   \                                 In section .bss, align 1
     77          char user_input = 0;
   \                     user_input:
   \   00000000                      DS8 1
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void USART2_IRQHandler()
     80          {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     81              if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD02A             BEQ.N    ??USART2_IRQHandler_0
     82              {
     83                  // Store the most recent received data
     84                  char received = (char)USART_ReceiveData(USART2);
   \   00000010   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
     85          
     86                  // Validate the received input
     87                  // 'w' - forward | 'a' - left | 's' - backward | 'd' - right | 'x' - stop | 'c' - change mode
     88                  if (received == 'w' || received == 'a' || received == 's' || received == 'd' || received == 'x' || received == 'c')
   \   00000016   0x0001             MOVS     R1,R0
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2977             CMP      R1,#+119
   \   0000001C   0xD013             BEQ.N    ??USART2_IRQHandler_1
   \   0000001E   0x0001             MOVS     R1,R0
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x2961             CMP      R1,#+97
   \   00000024   0xD00F             BEQ.N    ??USART2_IRQHandler_1
   \   00000026   0x0001             MOVS     R1,R0
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x2973             CMP      R1,#+115
   \   0000002C   0xD00B             BEQ.N    ??USART2_IRQHandler_1
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2964             CMP      R1,#+100
   \   00000034   0xD007             BEQ.N    ??USART2_IRQHandler_1
   \   00000036   0x0001             MOVS     R1,R0
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0x2978             CMP      R1,#+120
   \   0000003C   0xD003             BEQ.N    ??USART2_IRQHandler_1
   \   0000003E   0x0001             MOVS     R1,R0
   \   00000040   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000042   0x2963             CMP      R1,#+99
   \   00000044   0xD102             BNE.N    ??USART2_IRQHandler_2
     89                  {
     90                      user_input = received; // Valid input
   \                     ??USART2_IRQHandler_1: (+1)
   \   00000046   0x....             LDR.N    R1,??DataTable5_3
   \   00000048   0x7008             STRB     R0,[R1, #+0]
   \   0000004A   0xE007             B.N      ??USART2_IRQHandler_3
     91                  }
     92                  else
     93                  {
     94                      // Invalid input, send error message
     95                      char error_message[] = "invalid input\n";
   \                     ??USART2_IRQHandler_2: (+1)
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x....             LDR.N    R1,??DataTable5_4
   \   00000050   0x2210             MOVS     R2,#+16
   \   00000052   0x.... 0x....      BL       __aeabi_memcpy4
     96                      bt_send_to_user(error_message);
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x.... 0x....      BL       bt_send_to_user
     97                  }
     98          
     99                  // Clear the 'Read data register not empty' flag
    100                  USART_ClearITPendingBit(USART2, USART_IT_RXNE);
   \                     ??USART2_IRQHandler_3: (+1)
   \   0000005C   0xF240 0x5125      MOVW     R1,#+1317
   \   00000060   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   00000062   0x.... 0x....      BL       USART_ClearITPendingBit
    101              }
    102          }
   \                     ??USART2_IRQHandler_0: (+1)
   \   00000066   0xB005             ADD      SP,SP,#+20
   \   00000068   0xBD00             POP      {PC}             ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104          char bt_get_user_input(void)
    105          {
    106              return user_input;
   \                     bt_get_user_input: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_3
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    107          }
    108          

   \                                 In section .text, align 2, keep-with-next
    109          void bt_send_to_user(char *message)
    110          {
   \                     bt_send_to_user: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    111              for (int i = 0; message[i] != '\0'; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE009             B.N      ??bt_send_to_user_0
    112              {
    113                  while ((USART2->SR & USART_SR_TXE) == 0) // Wait until TX buffer is empty
   \                     ??bt_send_to_user_1: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0x0600             LSLS     R0,R0,#+24
   \   0000000E   0xD5FB             BPL.N    ??bt_send_to_user_1
    114                      ;
    115          
    116                  USART_SendData(USART2, message[i]);
   \   00000010   0x5D61             LDRB     R1,[R4, R5]
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40004400
   \   00000016   0x.... 0x....      BL       USART_SendData
    117              }
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??bt_send_to_user_0: (+1)
   \   0000001C   0x5D60             LDRB     R0,[R4, R5]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F2             BNE.N    ??bt_send_to_user_1
    118          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     user_input

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x69 0x6E          DC8 "invalid input\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   USART2_IRQHandler
        24   -> USART_ClearITPendingBit
        24   -> USART_GetITStatus
        24   -> USART_ReceiveData
        24   -> __aeabi_memcpy4
        24   -> bt_send_to_user
       0   __NVIC_EnableIRQ
       0   bt_get_user_input
       8   bt_gpio_configure
         8   -> GPIO_Init
       8   bt_init
         8   -> bt_gpio_configure
         8   -> bt_nvic_configure
         8   -> bt_rcc_configure
         8   -> bt_usart2_configure
       8   bt_nvic_configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   bt_rcc_configure
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      16   bt_send_to_user
        16   -> USART_SendData
      24   bt_usart2_configure
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
      16  ?_0
     106  USART2_IRQHandler
      28  __NVIC_EnableIRQ
       6  bt_get_user_input
      50  bt_gpio_configure
      20  bt_init
      48  bt_nvic_configure
      30  bt_rcc_configure
      36  bt_send_to_user
      70  bt_usart2_configure
       1  user_input

 
   1 byte  in section .bss
  16 bytes in section .rodata
 414 bytes in section .text
 
 414 bytes of CODE  memory
  16 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
