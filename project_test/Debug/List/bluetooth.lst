###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       12/Dec/2024  21:56:46
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\bluetooth.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EW2238.tmp
#        (C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\bluetooth.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List
#        -o
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\inc\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List\bluetooth.lst
#    Object file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj\bluetooth.o
#
###############################################################################

C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\bluetooth.c
      1          #include "bluetooth.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x....             LDR.N    R1,??DataTable7  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
      2          void bt_init(void)
      3          {
   \                     bt_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      4              bt_rcc_configure();
   \   00000002   0x.... 0x....      BL       bt_rcc_configure
      5              bt_gpio_configure();
   \   00000006   0x.... 0x....      BL       bt_gpio_configure
      6              bt_usart1_configure();
   \   0000000A   0x.... 0x....      BL       bt_usart1_configure
      7              bt_usart2_configure();
   \   0000000E   0x.... 0x....      BL       bt_usart2_configure
      8              bt_nvic_configure();
   \   00000012   0x.... 0x....      BL       bt_nvic_configure
      9          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
     10          

   \                                 In section .text, align 2, keep-with-next
     11          void bt_rcc_configure(void)
     12          {
   \                     bt_rcc_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     13              /* USART2 TX/RX port clock enable */
     14              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     15              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     16          
     17              /* USART2 clock enable */
     18              RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF44F 0x4080      MOV      R0,#+16384
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     19              RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000022   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     20          
     21              /* Alternate Function IO clock enable */
     22              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     23          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void bt_gpio_configure(void)
     26          {
   \                     bt_gpio_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     27              GPIO_InitTypeDef GPIO_InitStructure;
     28          
     29              // USART1 @@
     30              // TX
     31              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   00000002   0xF44F 0x7000      MOV      R0,#+512
   \   00000006   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     32              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     33              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000010   0x2018             MOVS     R0,#+24
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
     34              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40010800
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     35              // RX
     36              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   \   0000001E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000022   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     37              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0xF88D 0x0002      STRB     R0,[SP, #+2]
     38              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; // hw support pull-up reg
   \   0000002C   0x2004             MOVS     R0,#+4
   \   0000002E   0xF88D 0x0003      STRB     R0,[SP, #+3]
     39              // GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; // it can be used
     40              // GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; // it can be used
     41              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40010800
   \   00000036   0x.... 0x....      BL       GPIO_Init
     42          
     43              // USART2 @@
     44              GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2008             MOVS     R0,#+8
   \   0000003E   0x.... 0x....      BL       GPIO_PinRemapConfig
     45              // TX (PD5)
     46              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
   \   00000042   0x2020             MOVS     R0,#+32
   \   00000044   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     47              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     48              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   0000004E   0x2018             MOVS     R0,#+24
   \   00000050   0xF88D 0x0003      STRB     R0,[SP, #+3]
     49              GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000054   0x4669             MOV      R1,SP
   \   00000056   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40011400
   \   00000058   0x.... 0x....      BL       GPIO_Init
     50              // RX (PD6)
     51              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
   \   0000005C   0x2040             MOVS     R0,#+64
   \   0000005E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     52              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000062   0x2003             MOVS     R0,#+3
   \   00000064   0xF88D 0x0002      STRB     R0,[SP, #+2]
     53              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; // hw support pull-up reg
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     54              // GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; // it can be used
     55              // GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; // it can be used
     56              GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   0000006E   0x4669             MOV      R1,SP
   \   00000070   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40011400
   \   00000072   0x.... 0x....      BL       GPIO_Init
     57          }
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void bt_usart1_configure(void)
     60          {
   \                     bt_usart1_configure: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     61              USART_InitTypeDef USART1_InitStructure;
     62          
     63              // Enable the USART1 peripheral
     64              USART_Cmd(USART1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000006   0x.... 0x....      BL       USART_Cmd
     65          
     66              // TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
     67              USART1_InitStructure.USART_BaudRate = 9600;
   \   0000000A   0xF44F 0x5016      MOV      R0,#+9600
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     68              USART1_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     69              USART1_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     70              USART1_InitStructure.USART_Parity = USART_Parity_No;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     71              USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     72              USART1_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000028   0x200C             MOVS     R0,#+12
   \   0000002A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     73              USART_Init(USART1, &USART1_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000032   0x.... 0x....      BL       USART_Init
     74          
     75              // TODO: Enable the USART1 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
     76              USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xF240 0x5125      MOVW     R1,#+1317
   \   0000003C   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   0000003E   0x.... 0x....      BL       USART_ITConfig
     77          }
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBD00             POP      {PC}             ;; return
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void bt_usart2_configure(void)
     80          {
   \                     bt_usart2_configure: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     81              USART_InitTypeDef USART2_InitStructure;
     82          
     83              // Enable the USART2 peripheral
     84              USART_Cmd(USART2, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   00000006   0x.... 0x....      BL       USART_Cmd
     85          
     86              // TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
     87              USART2_InitStructure.USART_BaudRate = 9600;
   \   0000000A   0xF44F 0x5016      MOV      R0,#+9600
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     88              USART2_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     89              USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     90              USART2_InitStructure.USART_Parity = USART_Parity_No;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     91              USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     92              USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000028   0x200C             MOVS     R0,#+12
   \   0000002A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     93              USART_Init(USART2, &USART2_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   00000032   0x.... 0x....      BL       USART_Init
     94          
     95              // TODO: Enable the USART2 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
     96              USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xF240 0x5125      MOVW     R1,#+1317
   \   0000003C   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   0000003E   0x.... 0x....      BL       USART_ITConfig
     97          }
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBD00             POP      {PC}             ;; return
     98          

   \                                 In section .text, align 2, keep-with-next
     99          void bt_nvic_configure(void)
    100          {
   \                     bt_nvic_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    101          
    102              NVIC_InitTypeDef NVIC_InitStructure;
    103          
    104              // TODO: fill the arg you want
    105              NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \   00000002   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    106          
    107              // USART1
    108              // 'NVIC_EnableIRQ' is only required for USART setting
    109              NVIC_EnableIRQ(USART1_IRQn);
   \   0000000A   0x2025             MOVS     R0,#+37
   \   0000000C   0x.... 0x....      BL       __NVIC_EnableIRQ
    110              NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
   \   00000010   0x2025             MOVS     R0,#+37
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    111              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; // TODO
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    112              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;        // TODO
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    113              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
    114              NVIC_Init(&NVIC_InitStructure);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       NVIC_Init
    115          
    116              // USART2
    117              // 'NVIC_EnableIRQ' is only required for USART setting
    118              NVIC_EnableIRQ(USART2_IRQn);
   \   0000002E   0x2026             MOVS     R0,#+38
   \   00000030   0x.... 0x....      BL       __NVIC_EnableIRQ
    119              NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   00000034   0x2026             MOVS     R0,#+38
   \   00000036   0xF88D 0x0000      STRB     R0,[SP, #+0]
    120              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; // TODO
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    121              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;        // TODO
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xF88D 0x0002      STRB     R0,[SP, #+2]
    122              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0003      STRB     R0,[SP, #+3]
    123              NVIC_Init(&NVIC_InitStructure);
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       NVIC_Init
    124          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    125          
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void USART1_IRQHandler()
    128          {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    129              uint16_t word;
    130              if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00C             BEQ.N    ??USART1_IRQHandler_0
    131              {
    132                  // the most recent received data by the USART1 peripheral
    133                  word = USART_ReceiveData(USART1);
   \   00000010   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
   \   00000016   0x0001             MOVS     R1,R0
    134          
    135                  // TODO implement ???
    136                  //while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    137                  //while ((USART1->SR & USART_SR_TXE) == 0);
    138                  USART_SendData(USART2, word);
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   0000001C   0x.... 0x....      BL       USART_SendData
    139          
    140                  // clear 'Read data register not empty' flag
    141                  USART_ClearITPendingBit(USART1, USART_IT_RXNE);
   \   00000020   0xF240 0x5125      MOVW     R1,#+1317
   \   00000024   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000026   0x.... 0x....      BL       USART_ClearITPendingBit
    142              }
    143          }
   \                     ??USART1_IRQHandler_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 2
    144          uint16_t is_connected = 0;
   \                     is_connected:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    145          uint16_t user_input = 0;
   \                     user_input:
   \   00000000                      DS8 2

   \                                 In section .text, align 2, keep-with-next
    146          void USART2_IRQHandler()
    147          {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    148              uint16_t word;
    149              if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD012             BEQ.N    ??USART2_IRQHandler_0
    150              {
    151                  // the most recent received data by the USART2 peripheral
    152                  word = USART_ReceiveData(USART2);
   \   00000010   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
   \   00000016   0x0004             MOVS     R4,R0
    153                  
    154                  is_connected = 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable7_5
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
    155          
    156                  // TODO implement
    157                  //while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    158                  USART_SendData(USART1, word);
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000024   0x.... 0x....      BL       USART_SendData
    159                  user_input = word;
   \   00000028   0x....             LDR.N    R0,??DataTable7_6
   \   0000002A   0x8004             STRH     R4,[R0, #+0]
    160                  /*
    161                  // Validate the received input
    162                  // 'w' - forward | 'a' - left | 's' - backward | 'd' - right | 'x' - stop | 'c' - change mode
    163                  if (word == 119 || word == 97 || word == 115 || word == 100 || word == 120 || word == 99)
    164                  {
    165                      user_input = word; // Valid input
    166                  }
    167                  else
    168                  {
    169                      // Invalid input, send error message
    170                      char error_message[] = "invalid input\n";
    171                      bt_send_to_user(error_message);
    172                  }
    173          */
    174          
    175                  // clear 'Read data register not empty' flag
    176                  USART_ClearITPendingBit(USART2, USART_IT_RXNE);
   \   0000002C   0xF240 0x5125      MOVW     R1,#+1317
   \   00000030   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   00000032   0x.... 0x....      BL       USART_ClearITPendingBit
    177              }
    178          }
   \                     ??USART2_IRQHandler_0: (+1)
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    179          /*
    180          void USART2_IRQHandler()
    181          {
    182              if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    183              {
    184                  // Store the most recent received data
    185                  char received = (char)USART_ReceiveData(USART2);
    186          
    187                  // Validate the received input
    188                  // 'w' - forward | 'a' - left | 's' - backward | 'd' - right | 'x' - stop | 'c' - change mode
    189                  if (received == 'w' || received == 'a' || received == 's' || received == 'd' || received == 'x' || received == 'c')
    190                  {
    191                      user_input = received; // Valid input
    192                  }
    193                  else
    194                  {
    195                      // Invalid input, send error message
    196                      char error_message[] = "invalid input\n";
    197                      bt_send_to_user(error_message);
    198                  }
    199          
    200                  // Clear the 'Read data register not empty' flag
    201                  USART_ClearITPendingBit(USART2, USART_IT_RXNE);
    202              }
    203          }
    204          */
    205          

   \                                 In section .text, align 2, keep-with-next
    206          uint16_t bt_get_user_input(void)
    207          {       
    208              uint16_t result = user_input;
   \                     bt_get_user_input: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_6
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
    209              user_input = 122;
   \   00000004   0x217A             MOVS     R1,#+122
   \   00000006   0x....             LDR.N    R2,??DataTable7_6
   \   00000008   0x8011             STRH     R1,[R2, #+0]
    210              return result;
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x4770             BX       LR               ;; return
    211          }
    212          

   \                                 In section .text, align 2, keep-with-next
    213          void bt_send_to_user(char *message)
    214          {
   \                     bt_send_to_user: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    215              for (int i = 0; message[i] != '\0'; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE009             B.N      ??bt_send_to_user_0
    216              {
    217                  while ((USART2->SR & USART_SR_TXE) == 0) // Wait until TX buffer is empty
   \                     ??bt_send_to_user_1: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0x0600             LSLS     R0,R0,#+24
   \   0000000E   0xD5FB             BPL.N    ??bt_send_to_user_1
    218                      ;
    219          
    220                  USART_SendData(USART2, message[i]);
   \   00000010   0x5D61             LDRB     R1,[R4, R5]
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40004400
   \   00000016   0x.... 0x....      BL       USART_SendData
    221              }
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??bt_send_to_user_0: (+1)
   \   0000001C   0x5D60             LDRB     R0,[R4, R5]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F2             BNE.N    ??bt_send_to_user_1
    222              for (int i = 0; message[i] != '\0'; i++)
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xE009             B.N      ??bt_send_to_user_2
    223              {
    224                  while ((USART1->SR & USART_SR_TXE) == 0) // Wait until TX buffer is empty
   \                     ??bt_send_to_user_3: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000028   0x8800             LDRH     R0,[R0, #+0]
   \   0000002A   0x0600             LSLS     R0,R0,#+24
   \   0000002C   0xD5FB             BPL.N    ??bt_send_to_user_3
    225                      ;
    226          
    227                  USART_SendData(USART1, message[i]);
   \   0000002E   0x5D61             LDRB     R1,[R4, R5]
   \   00000030   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000032   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013800
   \   00000034   0x.... 0x....      BL       USART_SendData
    228              }
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \                     ??bt_send_to_user_2: (+1)
   \   0000003A   0x5D60             LDRB     R0,[R4, R5]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD1F2             BNE.N    ??bt_send_to_user_3
    229          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     is_connected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     user_input

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   USART1_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> USART_SendData
       8   USART2_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> USART_SendData
       0   __NVIC_EnableIRQ
       0   bt_get_user_input
       8   bt_gpio_configure
         8   -> GPIO_Init
         8   -> GPIO_PinRemapConfig
       8   bt_init
         8   -> bt_gpio_configure
         8   -> bt_nvic_configure
         8   -> bt_rcc_configure
         8   -> bt_usart1_configure
         8   -> bt_usart2_configure
       8   bt_nvic_configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   bt_rcc_configure
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      16   bt_send_to_user
        16   -> USART_SendData
      24   bt_usart1_configure
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
      24   bt_usart2_configure
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
      44  USART1_IRQHandler
      56  USART2_IRQHandler
      28  __NVIC_EnableIRQ
      14  bt_get_user_input
     120  bt_gpio_configure
      24  bt_init
      84  bt_nvic_configure
      48  bt_rcc_configure
      66  bt_send_to_user
      70  bt_usart1_configure
      70  bt_usart2_configure
       2  is_connected
       2  user_input

 
   4 bytes in section .bss
 652 bytes in section .text
 
 652 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
