###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       19/Dec/2024  16:47:17
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\infrared.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EW4DE9.tmp
#        (C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\infrared.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List
#        -o
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\inc\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List\infrared.lst
#    Object file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj\infrared.o
#
###############################################################################

C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\infrared.c
      1          #include "infrared.h"
      2          

   \                                 In section .bss, align 1
      3          volatile uint8_t ir_interrupt_flag = 0;
   \                     ir_interrupt_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
      4          volatile uint32_t ir_timer = 0;
   \                     ir_timer:
   \   00000000                      DS8 4
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void infrared_init(void)
      7          {
   \                     infrared_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      8              infrared_rcc_configure();
   \   00000002   0x.... 0x....      BL       infrared_rcc_configure
      9              infrared_gpio_configure();
   \   00000006   0x.... 0x....      BL       infrared_gpio_configure
     10              infrared_exti_configure();
   \   0000000A   0x.... 0x....      BL       infrared_exti_configure
     11          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void infrared_rcc_configure(void)
     14          {
   \                     infrared_rcc_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     15              RCC_APB2PeriphClockCmd(IR_SENSOR_RCC, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2010             MOVS     R0,#+16
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     16              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     17          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void infrared_gpio_configure(void)
     20          {
   \                     infrared_gpio_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     21              GPIO_InitTypeDef GPIO_InitStructure;
     22              GPIO_InitStructure.GPIO_Pin = IR_SENSOR_PIN;
   \   00000002   0xF44F 0x7000      MOV      R0,#+512
   \   00000006   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     23              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     24              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   \   00000010   0x2028             MOVS     R0,#+40
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
     25              GPIO_Init(IR_SENSOR_PORT, &GPIO_InitStructure);
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x....             LDR.N    R0,??DataTable3  ;; 0x40011000
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     26          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void infrared_exti_configure(void)
     29          {
   \                     infrared_exti_configure: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     30              EXTI_InitTypeDef EXTI_InitStructure;
     31              NVIC_InitTypeDef NVIC_InitStructure;
     32          
     33              // Enable the EXTI9_5 interrupt
     34              NVIC_InitStructure.NVIC_IRQChannel = IR_SENSOR_EXTI_IRQn;
   \   00000002   0x2017             MOVS     R0,#+23
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
     35              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0001      STRB     R0,[SP, #+1]
     36              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
     37              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF88D 0x0003      STRB     R0,[SP, #+3]
     38              NVIC_Init(&NVIC_InitStructure);
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       NVIC_Init
     39          
     40              // Configure EXTI line
     41              GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource9);
   \   00000020   0x2109             MOVS     R1,#+9
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x.... 0x....      BL       GPIO_EXTILineConfig
     42              EXTI_InitStructure.EXTI_Line = IR_SENSOR_EXTI_LINE;
   \   00000028   0xF44F 0x7000      MOV      R0,#+512
   \   0000002C   0x9001             STR      R0,[SP, #+4]
     43              EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF88D 0x0008      STRB     R0,[SP, #+8]
     44              EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   \   00000034   0x2008             MOVS     R0,#+8
   \   00000036   0xF88D 0x0009      STRB     R0,[SP, #+9]
     45              EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xF88D 0x000A      STRB     R0,[SP, #+10]
     46              EXTI_Init(&EXTI_InitStructure);
   \   00000040   0xA801             ADD      R0,SP,#+4
   \   00000042   0x.... 0x....      BL       EXTI_Init
     47          }
   \   00000046   0xBD07             POP      {R0-R2,PC}       ;; return
     48          
     49          /*
     50           * When the sensor detects a human, the sensor sends a HIGH signal through OUT pin
     51           * and retains it for 10 seconds.
     52           * The sensor sends a LOW signal when it detects no human.
     53           * The interrupt is triggered when the sensor sends a HIGH signal.
     54           * The interrupt handler sends a message to the user to check the camera.
     55           */
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void EXTI9_5_IRQHandler(void)
     58          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     59               if (EXTI_GetITStatus(IR_SENSOR_EXTI_LINE) != RESET)
   \   00000002   0xF44F 0x7000      MOV      R0,#+512
   \   00000006   0x.... 0x....      BL       EXTI_GetITStatus
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD011             BEQ.N    ??EXTI9_5_IRQHandler_0
     60               {
     61                   if (GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_9) == Bit_SET)
   \   0000000E   0xF44F 0x7100      MOV      R1,#+512
   \   00000012   0x....             LDR.N    R0,??DataTable3  ;; 0x40011000
   \   00000014   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD106             BNE.N    ??EXTI9_5_IRQHandler_1
     62                   {
     63                       if (!ir_interrupt_flag) // Check if the flag is already set
   \   0000001C   0x....             LDR.N    R0,??DataTable3_1
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD102             BNE.N    ??EXTI9_5_IRQHandler_1
     64                       {
     65                           ir_interrupt_flag = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable3_1
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     66          
     67                           // Simulate debouncing with a delay or software timer
     68                           // Reset the flag after 200ms (implement this in main loop)
     69                       }
     70                   }
     71          
     72                   EXTI_ClearITPendingBit(IR_SENSOR_EXTI_LINE);
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   0000002A   0xF44F 0x7000      MOV      R0,#+512
   \   0000002E   0x.... 0x....      BL       EXTI_ClearITPendingBit
     73               }
     74          }
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
     75          //void EXTI15_10_IRQHandler(void)
     76          //{
     77          //    if (EXTI_GetITStatus(IR_SENSOR_EXTI_LINE) != RESET)
     78          //    {
     79          //        if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_14) == Bit_SET)
     80          //        {
     81          //            if (!ir_interrupt_flag) // Check if the flag is already set
     82          //            {
     83          //                ir_interrupt_flag = 1;
     84          //
     85          //                // Simulate debouncing with a delay or software timer
     86          //                // Reset the flag after 200ms (implement this in main loop)
     87          //            }
     88          //        }
     89          //
     90          //        EXTI_ClearITPendingBit(IR_SENSOR_EXTI_LINE);
     91          //    }
     92          //}
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void reset_ir_flag(void)
     95          {
     96              if (ir_interrupt_flag) // && ir_timer > 200)
   \                     reset_ir_flag: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_1
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD005             BEQ.N    ??reset_ir_flag_0
     97              {
     98                  ir_interrupt_flag = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable3_1
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
     99                  ir_timer = 0; // Reset the timer
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable3_2
   \   00000012   0x6008             STR      R0,[R1, #+0]
    100              }
    101          }
   \                     ??reset_ir_flag_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ir_interrupt_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ir_timer

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EXTI9_5_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> GPIO_ReadInputDataBit
      16   infrared_exti_configure
        16   -> EXTI_Init
        16   -> GPIO_EXTILineConfig
        16   -> NVIC_Init
       8   infrared_gpio_configure
         8   -> GPIO_Init
       8   infrared_init
         8   -> infrared_exti_configure
         8   -> infrared_gpio_configure
         8   -> infrared_rcc_configure
       8   infrared_rcc_configure
         8   -> RCC_APB2PeriphClockCmd
       0   reset_ir_flag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
      52  EXTI9_5_IRQHandler
      72  infrared_exti_configure
      32  infrared_gpio_configure
      16  infrared_init
      20  infrared_rcc_configure
       1  ir_interrupt_flag
       4  ir_timer
      22  reset_ir_flag

 
   5 bytes in section .bss
 226 bytes in section .text
 
 226 bytes of CODE memory
   5 bytes of DATA memory

Errors: none
Warnings: none
