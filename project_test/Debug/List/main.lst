###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       19/Dec/2024  22:30:47
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\main.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EWC857.tmp
#        (C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List
#        -o
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\inc\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List\main.lst
#    Object file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\main.c
      1          #include "stm32f10x.h"
      2          #include "stm32f10x_exti.h"
      3          #include "stm32f10x_gpio.h"
      4          #include "stm32f10x_usart.h"
      5          #include "stm32f10x_rcc.h"
      6          #include "misc.h"
      7          
      8          #include "motor.h"
      9          #include "ultra_sonic.h"
     10          #include "bluetooth.h"
     11          #include "infrared.h"
     12          
     13          // motor.h
     14          extern int motor_mode;
     15          
     16          // ultra_sonic.h
     17          extern ultra_sonic us_front;
     18          extern ultra_sonic us_left;
     19          extern ultra_sonic us_right;
     20          extern ultra_sonic us_back;
     21          
     22          // infrared.h
     23          extern volatile uint8_t ir_interrupt_flag;
     24          extern volatile uint32_t ir_timer;
     25          
     26          // bluetooth
     27          extern uint16_t is_connected;
     28          

   \                                 In section .text, align 4, keep-with-next
     29          int main()
     30          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     31              SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
     32          
     33              motor_init();
   \   00000006   0x.... 0x....      BL       motor_init
     34              ultra_sonic_init();
   \   0000000A   0x.... 0x....      BL       ultra_sonic_init
     35              bt_init();
   \   0000000E   0x.... 0x....      BL       bt_init
     36              infrared_init();
   \   00000012   0x.... 0x....      BL       infrared_init
     37              USART_SendData(USART1, 97);
   \   00000016   0x2161             MOVS     R1,#+97
   \   00000018   0x4816             LDR.N    R0,??main_0      ;; 0x40013800
   \   0000001A   0x.... 0x....      BL       USART_SendData
     38              printf("init\n");
                     ^
Warning[Pe223]: function "printf" declared implicitly
   \   0000001E   0x4816             LDR.N    R0,??main_0+0x4
   \   00000020   0x.... 0x....      BL       printf
     39              bt_send_to_user("init\n");
   \   00000024   0x4814             LDR.N    R0,??main_0+0x4
   \   00000026   0x.... 0x....      BL       bt_send_to_user
     40              
     41              //is_connected = 1;
     42              while (1)
     43              {
     44                // USART_SendData(USART1, 97);
     45                if (is_connected) {
   \                     ??main_1: (+1)
   \   0000002A   0x4814             LDR.N    R0,??main_0+0x8
   \   0000002C   0x8800             LDRH     R0,[R0, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD0FB             BEQ.N    ??main_1
     46                    //USART_SendData(USART1, 98);
     47                    // update the obstacle flags
     48                  if (motor_mode == MOTOR_AUTO) {
   \   00000032   0x4813             LDR.N    R0,??main_0+0xC
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD10D             BNE.N    ??main_2
     49                      update_obstacle_flags();
   \   0000003A   0x.... 0x....      BL       update_obstacle_flags
     50                      printf("us_f: %d | l: %d | r: %d | b: %d\n", us_front.distance, us_left.distance, us_right.distance, us_back.distance);
   \   0000003E   0x4811             LDR.N    R0,??main_0+0x10
   \   00000040   0x6980             LDR      R0,[R0, #+24]
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0x4810             LDR.N    R0,??main_0+0x14
   \   00000046   0x6983             LDR      R3,[R0, #+24]
   \   00000048   0x4810             LDR.N    R0,??main_0+0x18
   \   0000004A   0x6982             LDR      R2,[R0, #+24]
   \   0000004C   0x4810             LDR.N    R0,??main_0+0x1C
   \   0000004E   0x6981             LDR      R1,[R0, #+24]
   \   00000050   0x4810             LDR.N    R0,??main_0+0x20
   \   00000052   0x.... 0x....      BL       printf
     51                  }
     52                    // control the motor based on the mode
     53                    motor_control();
   \                     ??main_2: (+1)
   \   00000056   0x.... 0x....      BL       motor_control
     54                    // printf("main loop\n");
     55                    //bt_send_to_user("human detected - check the camera\n");
     56                    // check the infrared sensor flag
     57                    if (ir_interrupt_flag)
   \   0000005A   0x480F             LDR.N    R0,??main_0+0x24
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD0E3             BEQ.N    ??main_1
     58                    {
     59                        printf("human detected - check the camera\n");
   \   00000062   0x480E             LDR.N    R0,??main_0+0x28
   \   00000064   0x.... 0x....      BL       printf
     60                        bt_send_to_user("human detected - check the camera\n");
   \   00000068   0x480C             LDR.N    R0,??main_0+0x28
   \   0000006A   0x.... 0x....      BL       bt_send_to_user
     61                        reset_ir_flag(); // reset the flag after 200ms
   \   0000006E   0x.... 0x....      BL       reset_ir_flag
   \   00000072   0xE7DA             B.N      ??main_1
   \                     ??main_0:
   \   00000074   0x40013800         DC32     0x40013800
   \   00000078   0x........         DC32     ?_0
   \   0000007C   0x........         DC32     is_connected
   \   00000080   0x........         DC32     motor_mode
   \   00000084   0x........         DC32     us_back
   \   00000088   0x........         DC32     us_right
   \   0000008C   0x........         DC32     us_left
   \   00000090   0x........         DC32     us_front
   \   00000094   0x........         DC32     ?_1
   \   00000098   0x........         DC32     ir_interrupt_flag
   \   0000009C   0x........         DC32     ?_2
     62                    }
     63                }
     64              }
     65          
     66              return 0;
                     ^
Warning[Pe111]: statement is unreachable
     67          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x69 0x6E          DC8 "init\012"
   \              0x69 0x74    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x75 0x73          DC8 "us_f: %d | l: %d | r: %d | b: %d\012"
   \              0x5F 0x66    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x7C    
   \              0x20 0x6C    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x7C    
   \              0x20 0x72    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x7C    
   \              0x20 0x62    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x68 0x75          DC8 "human detected - check the camera\012"
   \              0x6D 0x61    
   \              0x6E 0x20    
   \              0x64 0x65    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x2D    
   \              0x20 0x63    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x63    
   \              0x61 0x6D    
   \              0x65 0x72    
   \              0x61 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> SystemInit
         8   -> USART_SendData
         8   -> bt_init
         8   -> bt_send_to_user
         8   -> infrared_init
         8   -> motor_control
         8   -> motor_init
         8   -> printf
         8   -> reset_ir_flag
         8   -> ultra_sonic_init
         8   -> update_obstacle_flags


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?_0
      36  ?_1
      36  ?_2
     160  main

 
  80 bytes in section .rodata
 160 bytes in section .text
 
 160 bytes of CODE  memory
  80 bytes of CONST memory

Errors: none
Warnings: 2
