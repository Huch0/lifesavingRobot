###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       12/Dec/2024  16:53:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\main.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EW428D.tmp
#        (C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List
#        -o
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\
#        -I
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\inc\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\List\main.lst
#    Object file  =  
#        C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu2\Documents\GitHub\lifesavingRobot\project_test\user\main.c
      1          #include "stm32f10x.h"
      2          #include "stm32f10x_exti.h"
      3          #include "stm32f10x_gpio.h"
      4          #include "stm32f10x_usart.h"
      5          #include "stm32f10x_rcc.h"
      6          #include "misc.h"
      7          
      8          #include "motor.h"
      9          #include "ultra_sonic.h"
     10          #include "bluetooth.h"
     11          #include "infrared.h"
     12          
     13          // motor.h
     14          //extern int motor_mode;
     15          
     16          // ultra_sonic.h
     17          extern ultra_sonic us_front;
     18          extern ultra_sonic us_left;
     19          extern ultra_sonic us_right;
     20          extern ultra_sonic us_back;
     21          
     22          // infrared.h
     23          extern volatile uint8_t ir_interrupt_flag;
     24          extern volatile uint32_t ir_timer;
     25          
     26          /*
     27          void SysTick_init(void)
     28          {
     29              // Calculate the reload value for 1ms interval
     30              uint32_t reload_value = (SystemCoreClock / 1000) - 1;
     31          
     32              // Set the reload value to configure the SysTick timer
     33              SysTick->LOAD = reload_value;
     34          
     35              // Set the SysTick current value register to 0
     36              SysTick->VAL = 0;
     37          
     38              // Set the SysTick control and status register:
     39              // - Enable SysTick
     40              // - Enable SysTick interrupt
     41              // - Use system clock as the clock source
     42              SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk;
     43          }
     44          
     45          void SysTick_Handler(void)
     46          {
     47              // Your code to handle SysTick interrupt (e.g., update counters, flags)
     48              if (ir_interrupt_flag)
     49              {
     50                  ir_timer++;
     51              }
     52          }
     53          */
     54          

   \                                 In section .text, align 4, keep-with-next
     55           int main()
     56          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     57              SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
     58              //SysTick_init();
     59          
     60              motor_init();
   \   00000006   0x.... 0x....      BL       motor_init
     61              ultra_sonic_init();
   \   0000000A   0x.... 0x....      BL       ultra_sonic_init
     62              bt_init();
   \   0000000E   0x.... 0x....      BL       bt_init
     63              infrared_init();
   \   00000012   0x.... 0x....      BL       infrared_init
     64          
     65              while (1)
     66              {
     67                  // update the obstacle flags
     68                  update_obstacle_flags();
   \                     ??main_1: (+1)
   \   00000016   0x.... 0x....      BL       update_obstacle_flags
     69                  // printf("us_f: %d | l: %d | r: %d | b: %d\n", us_front.distance, us_left.distance, us_right.distance, us_back.distance);
     70                  
     71          
     72                  // control the motor based on the mode
     73                  // motor_control();
     74          
     75                  // check the infrared sensor flag
     76                  if (ir_interrupt_flag)
   \   0000001A   0x4805             LDR.N    R0,??main_0
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD0F9             BEQ.N    ??main_1
     77                  {
     78                      printf("human detected - check the camera\n");
                             ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000022   0x4804             LDR.N    R0,??main_0+0x4
   \   00000024   0x.... 0x....      BL       printf
     79                      // bt_send_to_user("human detected - check the camera\n");
     80                      reset_ir_flag(); // reset the flag after 200ms
   \   00000028   0x.... 0x....      BL       reset_ir_flag
   \   0000002C   0xE7F3             B.N      ??main_1
   \   0000002E   0xBF00             Nop      
   \                     ??main_0:
   \   00000030   0x........         DC32     ir_interrupt_flag
   \   00000034   0x........         DC32     ?_0
     81                  }
     82              }
     83          
     84              return 0;
                     ^
Warning[Pe111]: statement is unreachable
     85          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x68 0x75          DC8 "human detected - check the camera\012"
   \              0x6D 0x61    
   \              0x6E 0x20    
   \              0x64 0x65    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x2D    
   \              0x20 0x63    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x63    
   \              0x61 0x6D    
   \              0x65 0x72    
   \              0x61 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> SystemInit
         8   -> bt_init
         8   -> infrared_init
         8   -> motor_init
         8   -> printf
         8   -> reset_ir_flag
         8   -> ultra_sonic_init
         8   -> update_obstacle_flags


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  ?_0
      56  main

 
 36 bytes in section .rodata
 56 bytes in section .text
 
 56 bytes of CODE  memory
 36 bytes of CONST memory

Errors: none
Warnings: 2
