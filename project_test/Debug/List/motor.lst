###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       05/Dec/2024  20:59:04
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu2\Downloads\project_test\project_test\user\motor.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EWD71F.tmp
#        (C:\Users\pnu2\Downloads\project_test\project_test\user\motor.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Downloads\project_test\project_test\Debug\List -o
#        C:\Users\pnu2\Downloads\project_test\project_test\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Downloads\project_test\project_test\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu2\Downloads\project_test\project_test\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Downloads\project_test\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Downloads\project_test\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Downloads\project_test\project_test\libraries\LCD\ -I
#        C:\Users\pnu2\Downloads\project_test\project_test\user\ -I
#        C:\Users\pnu2\Downloads\project_test\project_test\user\inc\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu2\Downloads\project_test\project_test\Debug\List\motor.lst
#    Object file  =  
#        C:\Users\pnu2\Downloads\project_test\project_test\Debug\Obj\motor.o
#
###############################################################################

C:\Users\pnu2\Downloads\project_test\project_test\user\motor.c
      1          #include "motor.h"
      2          

   \                                 In section .bss, align 4
      3          int motor_mode;
   \                     motor_mode:
   \   00000000                      DS8 4
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void motor_init(void)
      6          {
   \                     motor_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      7              motor_rcc_configure();
   \   00000002   0x.... 0x....      BL       motor_rcc_configure
      8              motor_gpio_configure();
   \   00000006   0x.... 0x....      BL       motor_gpio_configure
      9              motor_mode = MOTOR_AUTO;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x....             LDR.N    R1,??DataTable7
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     10          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void motor_rcc_configure(void)
     13          {
   \                     motor_rcc_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     14              RCC_APB2PeriphClockCmd(MOTOR_FL1_RCC, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     15              RCC_APB2PeriphClockCmd(MOTOR_FL2_RCC, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     16              RCC_APB2PeriphClockCmd(MOTOR_FR1_RCC, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2020             MOVS     R0,#+32
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     17              RCC_APB2PeriphClockCmd(MOTOR_FR2_RCC, ENABLE);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     18              RCC_APB2PeriphClockCmd(MOTOR_BL1_RCC, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2020             MOVS     R0,#+32
   \   00000026   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     19              RCC_APB2PeriphClockCmd(MOTOR_BL2_RCC, ENABLE);
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2020             MOVS     R0,#+32
   \   0000002E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     20              RCC_APB2PeriphClockCmd(MOTOR_BR1_RCC, ENABLE);
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2020             MOVS     R0,#+32
   \   00000036   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     21              RCC_APB2PeriphClockCmd(MOTOR_BR2_RCC, ENABLE);
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2020             MOVS     R0,#+32
   \   0000003E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     22          }
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void motor_gpio_configure(void)
     25          {
   \                     motor_gpio_configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     26              GPIO_InitTypeDef GPIO_InitStructure;
     27              GPIO_InitStructure.GPIO_Pin = MOTOR_FL1_PIN;
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     28              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     29              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0xF88D 0x0003      STRB     R0,[SP, #+3]
     30              GPIO_Init(MOTOR_FL1_PORT, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000018   0x.... 0x....      BL       GPIO_Init
     31          
     32              GPIO_InitStructure.GPIO_Pin = MOTOR_FL2_PIN;
   \   0000001C   0x2008             MOVS     R0,#+8
   \   0000001E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     33              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0xF88D 0x0002      STRB     R0,[SP, #+2]
     34              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000028   0x2010             MOVS     R0,#+16
   \   0000002A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     35              GPIO_Init(MOTOR_FL2_PORT, &GPIO_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000032   0x.... 0x....      BL       GPIO_Init
     36          
     37              GPIO_InitStructure.GPIO_Pin = MOTOR_FR1_PIN;
   \   00000036   0x2010             MOVS     R0,#+16
   \   00000038   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     38              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     39              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000042   0x2010             MOVS     R0,#+16
   \   00000044   0xF88D 0x0003      STRB     R0,[SP, #+3]
     40              GPIO_Init(MOTOR_FR1_PORT, &GPIO_InitStructure);
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000004C   0x.... 0x....      BL       GPIO_Init
     41          
     42              GPIO_InitStructure.GPIO_Pin = MOTOR_FR2_PIN;
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     43              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0xF88D 0x0002      STRB     R0,[SP, #+2]
     44              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000005C   0x2010             MOVS     R0,#+16
   \   0000005E   0xF88D 0x0003      STRB     R0,[SP, #+3]
     45              GPIO_Init(MOTOR_FR2_PORT, &GPIO_InitStructure);
   \   00000062   0x4669             MOV      R1,SP
   \   00000064   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000066   0x.... 0x....      BL       GPIO_Init
     46          
     47              GPIO_InitStructure.GPIO_Pin = MOTOR_BL1_PIN;
   \   0000006A   0xF44F 0x7080      MOV      R0,#+256
   \   0000006E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     48              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000072   0x2003             MOVS     R0,#+3
   \   00000074   0xF88D 0x0002      STRB     R0,[SP, #+2]
     49              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000078   0x2010             MOVS     R0,#+16
   \   0000007A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     50              GPIO_Init(MOTOR_BL1_PORT, &GPIO_InitStructure);
   \   0000007E   0x4669             MOV      R1,SP
   \   00000080   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000082   0x.... 0x....      BL       GPIO_Init
     51          
     52              GPIO_InitStructure.GPIO_Pin = MOTOR_BL2_PIN;
   \   00000086   0xF44F 0x7000      MOV      R0,#+512
   \   0000008A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     53              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000008E   0x2003             MOVS     R0,#+3
   \   00000090   0xF88D 0x0002      STRB     R0,[SP, #+2]
     54              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000094   0x2010             MOVS     R0,#+16
   \   00000096   0xF88D 0x0003      STRB     R0,[SP, #+3]
     55              GPIO_Init(MOTOR_BL2_PORT, &GPIO_InitStructure);
   \   0000009A   0x4669             MOV      R1,SP
   \   0000009C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000009E   0x.... 0x....      BL       GPIO_Init
     56          
     57              GPIO_InitStructure.GPIO_Pin = MOTOR_BR1_PIN;
   \   000000A2   0xF44F 0x4080      MOV      R0,#+16384
   \   000000A6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     58              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000AA   0x2003             MOVS     R0,#+3
   \   000000AC   0xF88D 0x0002      STRB     R0,[SP, #+2]
     59              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   000000B0   0x2010             MOVS     R0,#+16
   \   000000B2   0xF88D 0x0003      STRB     R0,[SP, #+3]
     60              GPIO_Init(MOTOR_BR1_PORT, &GPIO_InitStructure);
   \   000000B6   0x4669             MOV      R1,SP
   \   000000B8   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   000000BA   0x.... 0x....      BL       GPIO_Init
     61          
     62              GPIO_InitStructure.GPIO_Pin = MOTOR_BR2_PIN;
   \   000000BE   0xF44F 0x4000      MOV      R0,#+32768
   \   000000C2   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     63              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000C6   0x2003             MOVS     R0,#+3
   \   000000C8   0xF88D 0x0002      STRB     R0,[SP, #+2]
     64              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   000000CC   0x2010             MOVS     R0,#+16
   \   000000CE   0xF88D 0x0003      STRB     R0,[SP, #+3]
     65              GPIO_Init(MOTOR_BR2_PORT, &GPIO_InitStructure);
   \   000000D2   0x4669             MOV      R1,SP
   \   000000D4   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   000000D6   0x.... 0x....      BL       GPIO_Init
     66          }
   \   000000DA   0xBD01             POP      {R0,PC}          ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void manual_control(void)
     69          {
     70              if (motor_mode == MOTOR_AUTO)
     71              {
     72                  // Raise error
     73              }
     74              // TODO
     75          }
   \                     manual_control: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void auto_control(float f_distance, float l_distance, float r_distance, float b_distance)
     78          {
   \                     auto_control: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
     79              if (f_distance > SAFE_DISTANCE)
   \   00000004   0x....             LDR.N    R1,??DataTable7_2  ;; 0x41200001
   \   00000006   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000000A   0xD802             BHI.N    ??auto_control_0
     80              {
     81                  go_forward();
   \   0000000C   0x.... 0x....      BL       go_forward
   \   00000010   0xE019             B.N      ??auto_control_1
     82              }
     83              else if (l_distance > SAFE_DISTANCE)
   \                     ??auto_control_0: (+1)
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x....             LDR.N    R1,??DataTable7_2  ;; 0x41200001
   \   00000016   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000001A   0xD802             BHI.N    ??auto_control_2
     84              {
     85                  turn_left();
   \   0000001C   0x.... 0x....      BL       turn_left
   \   00000020   0xE011             B.N      ??auto_control_1
     86              }
     87              else if (r_distance > SAFE_DISTANCE)
   \                     ??auto_control_2: (+1)
   \   00000022   0x0010             MOVS     R0,R2
   \   00000024   0x....             LDR.N    R1,??DataTable7_2  ;; 0x41200001
   \   00000026   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000002A   0xD802             BHI.N    ??auto_control_3
     88              {
     89                  turn_right();
   \   0000002C   0x.... 0x....      BL       turn_right
   \   00000030   0xE009             B.N      ??auto_control_1
     90              }
     91              else if (b_distance > SAFE_DISTANCE)
   \                     ??auto_control_3: (+1)
   \   00000032   0x0018             MOVS     R0,R3
   \   00000034   0x....             LDR.N    R1,??DataTable7_2  ;; 0x41200001
   \   00000036   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000003A   0xD802             BHI.N    ??auto_control_4
     92              {
     93                  go_backward();
   \   0000003C   0x.... 0x....      BL       go_backward
   \   00000040   0xE001             B.N      ??auto_control_1
     94              }
     95              else
     96              {
     97                  stop();
   \                     ??auto_control_4: (+1)
   \   00000042   0x.... 0x....      BL       stop
     98              }
     99          }
   \                     ??auto_control_1: (+1)
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void go_forward(void)
    102          {
   \                     go_forward: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103              GPIO_SetBits(MOTOR_FL1_PORT, MOTOR_FL1_PIN);
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000006   0x.... 0x....      BL       GPIO_SetBits
    104              GPIO_ResetBits(MOTOR_FL2_PORT, MOTOR_FL2_PIN);
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000000E   0x.... 0x....      BL       GPIO_ResetBits
    105          
    106              GPIO_SetBits(MOTOR_FR1_PORT, MOTOR_FR1_PIN);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000016   0x.... 0x....      BL       GPIO_SetBits
    107              GPIO_ResetBits(MOTOR_FR2_PORT, MOTOR_FR2_PIN);
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000001E   0x.... 0x....      BL       GPIO_ResetBits
    108          
    109              GPIO_SetBits(MOTOR_BL1_PORT, MOTOR_BL1_PIN);
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
    110              GPIO_ResetBits(MOTOR_BL2_PORT, MOTOR_BL2_PIN);
   \   0000002C   0xF44F 0x7100      MOV      R1,#+512
   \   00000030   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    111          
    112              GPIO_SetBits(MOTOR_BR1_PORT, MOTOR_BR1_PIN);
   \   00000036   0xF44F 0x4180      MOV      R1,#+16384
   \   0000003A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000003C   0x.... 0x....      BL       GPIO_SetBits
    113              GPIO_ResetBits(MOTOR_BR2_PORT, MOTOR_BR2_PIN);
   \   00000040   0xF44F 0x4100      MOV      R1,#+32768
   \   00000044   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000046   0x.... 0x....      BL       GPIO_ResetBits
    114          
    115              default_delay();
   \   0000004A   0x.... 0x....      BL       default_delay
    116              stop();
   \   0000004E   0x.... 0x....      BL       stop
    117          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    118          

   \                                 In section .text, align 2, keep-with-next
    119          void go_backward(void)
    120          {
   \                     go_backward: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121              GPIO_ResetBits(MOTOR_FL1_PORT, MOTOR_FL1_PIN);
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000006   0x.... 0x....      BL       GPIO_ResetBits
    122              GPIO_SetBits(MOTOR_FL2_PORT, MOTOR_FL2_PIN);
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000000E   0x.... 0x....      BL       GPIO_SetBits
    123          
    124              GPIO_ResetBits(MOTOR_FR1_PORT, MOTOR_FR1_PIN);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000016   0x.... 0x....      BL       GPIO_ResetBits
    125              GPIO_SetBits(MOTOR_FR2_PORT, MOTOR_FR2_PIN);
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000001E   0x.... 0x....      BL       GPIO_SetBits
    126          
    127              GPIO_ResetBits(MOTOR_BL1_PORT, MOTOR_BL1_PIN);
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000028   0x.... 0x....      BL       GPIO_ResetBits
    128              GPIO_SetBits(MOTOR_BL2_PORT, MOTOR_BL2_PIN);
   \   0000002C   0xF44F 0x7100      MOV      R1,#+512
   \   00000030   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000032   0x.... 0x....      BL       GPIO_SetBits
    129          
    130              GPIO_ResetBits(MOTOR_BR1_PORT, MOTOR_BR1_PIN);
   \   00000036   0xF44F 0x4180      MOV      R1,#+16384
   \   0000003A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000003C   0x.... 0x....      BL       GPIO_ResetBits
    131              GPIO_SetBits(MOTOR_BR2_PORT, MOTOR_BR2_PIN);
   \   00000040   0xF44F 0x4100      MOV      R1,#+32768
   \   00000044   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000046   0x.... 0x....      BL       GPIO_SetBits
    132          
    133              default_delay();
   \   0000004A   0x.... 0x....      BL       default_delay
    134              stop();
   \   0000004E   0x.... 0x....      BL       stop
    135          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void turn_left(void)
    138          {
   \                     turn_left: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139              // Front Left: go forward
    140              GPIO_SetBits(MOTOR_FL1_PORT, MOTOR_FL1_PIN);
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000006   0x.... 0x....      BL       GPIO_SetBits
    141              GPIO_ResetBits(MOTOR_FL2_PORT, MOTOR_FL2_PIN);
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000000E   0x.... 0x....      BL       GPIO_ResetBits
    142          
    143              // Front Right: go backward
    144              GPIO_ResetBits(MOTOR_FR1_PORT, MOTOR_FR1_PIN);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000016   0x.... 0x....      BL       GPIO_ResetBits
    145              GPIO_SetBits(MOTOR_FR2_PORT, MOTOR_FR2_PIN);
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000001E   0x.... 0x....      BL       GPIO_SetBits
    146          
    147              // Back Left: Stop
    148              GPIO_ResetBits(MOTOR_BL1_PORT, MOTOR_BL1_PIN);
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000028   0x.... 0x....      BL       GPIO_ResetBits
    149              GPIO_ResetBits(MOTOR_BL2_PORT, MOTOR_BL2_PIN);
   \   0000002C   0xF44F 0x7100      MOV      R1,#+512
   \   00000030   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    150          
    151              // Back Right: go forward
    152              GPIO_SetBits(MOTOR_BR1_PORT, MOTOR_BR1_PIN);
   \   00000036   0xF44F 0x4180      MOV      R1,#+16384
   \   0000003A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000003C   0x.... 0x....      BL       GPIO_SetBits
    153              GPIO_ResetBits(MOTOR_BR2_PORT, MOTOR_BR2_PIN);
   \   00000040   0xF44F 0x4100      MOV      R1,#+32768
   \   00000044   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000046   0x.... 0x....      BL       GPIO_ResetBits
    154          
    155              default_delay();
   \   0000004A   0x.... 0x....      BL       default_delay
    156              stop();
   \   0000004E   0x.... 0x....      BL       stop
    157          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void turn_right(void)
    160          {
   \                     turn_right: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    161              // Front Left: go backward
    162              GPIO_ResetBits(MOTOR_FL1_PORT, MOTOR_FL1_PIN);
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000006   0x.... 0x....      BL       GPIO_ResetBits
    163              GPIO_SetBits(MOTOR_FL2_PORT, MOTOR_FL2_PIN);
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000000E   0x.... 0x....      BL       GPIO_SetBits
    164          
    165              // Front Right: go forward
    166              GPIO_SetBits(MOTOR_FR1_PORT, MOTOR_FR1_PIN);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000016   0x.... 0x....      BL       GPIO_SetBits
    167              GPIO_ResetBits(MOTOR_FR2_PORT, MOTOR_FR2_PIN);
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000001E   0x.... 0x....      BL       GPIO_ResetBits
    168          
    169              // Back Left: go forward
    170              GPIO_SetBits(MOTOR_BL1_PORT, MOTOR_BL1_PIN);
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
    171              GPIO_ResetBits(MOTOR_BL2_PORT, MOTOR_BL2_PIN);
   \   0000002C   0xF44F 0x7100      MOV      R1,#+512
   \   00000030   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    172          
    173              // Back Right: Stop
    174              GPIO_ResetBits(MOTOR_BR1_PORT, MOTOR_BR1_PIN);
   \   00000036   0xF44F 0x4180      MOV      R1,#+16384
   \   0000003A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000003C   0x.... 0x....      BL       GPIO_ResetBits
    175              GPIO_ResetBits(MOTOR_BR2_PORT, MOTOR_BR2_PIN);
   \   00000040   0xF44F 0x4100      MOV      R1,#+32768
   \   00000044   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000046   0x.... 0x....      BL       GPIO_ResetBits
    176          
    177              default_delay();
   \   0000004A   0x.... 0x....      BL       default_delay
    178              stop();
   \   0000004E   0x.... 0x....      BL       stop
    179          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    180          

   \                                 In section .text, align 2, keep-with-next
    181          void stop(void)
    182          {
   \                     stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    183              GPIO_ResetBits(MOTOR_FL1_PORT, MOTOR_FL1_PIN);
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000006   0x.... 0x....      BL       GPIO_ResetBits
    184              GPIO_ResetBits(MOTOR_FL2_PORT, MOTOR_FL2_PIN);
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000000E   0x.... 0x....      BL       GPIO_ResetBits
    185          
    186              GPIO_ResetBits(MOTOR_FR1_PORT, MOTOR_FR1_PIN);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000016   0x.... 0x....      BL       GPIO_ResetBits
    187              GPIO_ResetBits(MOTOR_FR2_PORT, MOTOR_FR2_PIN);
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000001E   0x.... 0x....      BL       GPIO_ResetBits
    188          
    189              GPIO_ResetBits(MOTOR_BL1_PORT, MOTOR_BL1_PIN);
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000028   0x.... 0x....      BL       GPIO_ResetBits
    190              GPIO_ResetBits(MOTOR_BL2_PORT, MOTOR_BL2_PIN);
   \   0000002C   0xF44F 0x7100      MOV      R1,#+512
   \   00000030   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    191          
    192              GPIO_ResetBits(MOTOR_BR1_PORT, MOTOR_BR1_PIN);
   \   00000036   0xF44F 0x4180      MOV      R1,#+16384
   \   0000003A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   0000003C   0x.... 0x....      BL       GPIO_ResetBits
    193              GPIO_ResetBits(MOTOR_BR2_PORT, MOTOR_BR2_PIN);
   \   00000040   0xF44F 0x4100      MOV      R1,#+32768
   \   00000044   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40011400
   \   00000046   0x.... 0x....      BL       GPIO_ResetBits
    194          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     motor_mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x41200001         DC32     0x41200001

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   auto_control
         8   -> go_backward
         8   -> go_forward
         8   -> stop
         8   -> turn_left
         8   -> turn_right
         8 __aeabi_cfrcmple
       8   go_backward
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> default_delay
         8   -> stop
       8   go_forward
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> default_delay
         8   -> stop
       0   manual_control
       8   motor_gpio_configure
         8   -> GPIO_Init
       8   motor_init
         8   -> motor_gpio_configure
         8   -> motor_rcc_configure
       8   motor_rcc_configure
         8   -> RCC_APB2PeriphClockCmd
       8   stop
         8   -> GPIO_ResetBits
       8   turn_left
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> default_delay
         8   -> stop
       8   turn_right
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> default_delay
         8   -> stop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
      72  auto_control
      84  go_backward
      84  go_forward
       2  manual_control
     220  motor_gpio_configure
      18  motor_init
       4  motor_mode
      68  motor_rcc_configure
      76  stop
      84  turn_left
      84  turn_right

 
   4 bytes in section .bss
 804 bytes in section .text
 
 804 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
